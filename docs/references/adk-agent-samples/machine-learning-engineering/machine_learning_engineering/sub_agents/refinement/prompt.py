"""定義優化代理的提示。"""

ABLATION_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您需要對目前的 Python 解決方案進行消融研究 (ablation study)，以了解程式碼的哪些部分對整體性能貢獻最大。
- 我們現在將提供一個目前的 Python 解決方案。

# Python 解決方案
```python
{code}
```
# 指示
- 您需要產生一個簡單的 Python 程式碼，對上述 Python 解決方案腳本進行消融研究。
- 產生的程式碼應透過修改或停用訓練過程的部分（1-2 個簡單部分）來建立變體。
- 對於每次消融，印出修改對模型性能的影響。

# 回應格式
- 您的回應中不應有額外的標題或文字。
- 用於消融研究的 Python 程式碼不應載入測試資料。它應僅專注於在驗證集上訓練和評估模型。
- 程式碼應包含一個顯示每次消融性能的列印語句。
- 程式碼應因此印出程式碼的哪個部分對整體性能貢獻最大。
"""

ABLATION_SEQ_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您需要對目前的 Python 解決方案進行消融研究，以了解程式碼的哪些部分對整體性能貢獻最大。
- 我們現在將提供一個目前的 Python 解決方案。
- 我們還將提供先前消融研究的摘要。

# Python 解決方案
```python
{code}
```

{prev_ablations}

# 指示
- 您需要產生一個簡單的 Python 程式碼，對 train.py 腳本進行消融研究。
- 產生的程式碼應透過修改或停用訓練過程的部分（2-3 個部分）來建立變體。
- 您的消融研究應專注於先前未考慮的其他部分。
- 對於每次消融，印出修改對模型性能的影響。

# 回應格式
- 您的回應中不應有額外的標題或文字。
- 用於消融研究的 Python 程式碼不應載入測試資料。它應僅專注於在驗證集上訓練和評估模型。
- 程式碼應包含一個顯示每次消融性能的列印語句。
- 程式碼應因此印出程式碼的哪個部分對整體性能貢獻最大。
"""

SUMMARIZE_ABLATION_INSTR = """# 您用於消融研究的程式碼是：
```python
{code}
```

# 執行上述程式碼後的消融研究結果：
{result}

# 您的任務
- 根據程式碼和列印的輸出總結消融研究的結果。
"""

EXTRACT_BLOCK_AND_PLAN_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您需要從目前的 Python 解決方案中提取一個程式碼區塊，並改進提取的區塊以獲得更好的性能。
- 您的建議應基於目前 Python 解決方案的消融研究結果。
- 我們現在將提供目前的 Python 解決方案和消融研究結果。

# Python 解決方案
```python
{code}
```

# 消融研究結果
{ablation_results}

# 您的任務
- 根據消融研究結果，提出一個有效的下一步計畫來改進上述 Python 腳本。
- 該計畫應為您提議的解決方案的簡要大綱/草圖，以自然語言撰寫（3-5 句話）。
- 請避免可能導致解決方案執行時間過長的計畫（例如，在非常大的搜尋空間中搜尋超參數）。
- 同時從上述 Python 腳本中提取需要根據提議的計畫進行改進的程式碼區塊。

# 回應格式
- 您的回應應為您提議的解決方案的簡要自然語言大綱/草圖（3-5 句話）和一個單一的 markdown 程式碼區塊，即需要改進的程式碼區塊。
- 程式碼區塊可以很長，但必須完全從上面提供的 Python 腳本中提取。

使用此 JSON 結構描述：

Refine_Plan = {{'code_block': str, 'plan': str}}
返回: list[Refine_Plan]"""

EXTRACT_BLOCK_AND_PLAN_SEQ_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您需要從目前的 Python 解決方案中提取一個程式碼區塊，並改進提取的區塊以獲得更好的性能。
- 您的建議應基於目前 Python 解決方案的消融研究結果。
- 我們現在將提供目前的 Python 解決方案和消融研究結果。
- 我們還提供您之前嘗試改進的程式碼區塊。

# Python 解決方案
```python
{code}
```

# 消融研究結果
{ablation_results}

{prev_code_blocks}

# 您的任務
- 根據消融研究結果，提出一個有效的下一步計畫來改進上述 Python 腳本。
- 該計畫應為您提議的解決方案的簡要大綱/草圖，以自然語言撰寫（3-5 句話）。
- 請避免可能導致解決方案執行時間過長的計畫（例如，在非常大的搜尋空間中搜尋超參數）。
- 嘗試改進之前未考慮的其他部分。
- 同時從上述 Python 腳本中提取需要根據提議的計畫進行改進的程式碼區塊。您應該嘗試提取之前未改進過的程式碼區塊。

# 回應格式
- 您的回應應為您提議的解決方案的簡要自然語言大綱/草圖（3-5 句話）和一個單一的 markdown 程式碼區塊，即需要改進的程式碼區塊。
- 程式碼區塊可以很長，但必須完全從上面提供的 Python 腳本中提取。

使用此 JSON 結構描述：

Refine_Plan = {{'code_block': str, 'plan': str}}
返回: list[Refine_Plan]"""

PLAN_REFINEMENT_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您必須改進程式碼區塊以獲得更好的性能。
- 我們將提供您正在改進的程式碼區塊以及您已嘗試過的改進計畫。

# 程式碼區塊
```python
{code_block}
```

# 您已嘗試過的改進計畫

{prev_plan_summary}

# 您的任務
- 建議一個更好的計畫來改進上述程式碼區塊。
- 建議的計畫必須新穎且有效。
- 請避免可能導致解決方案執行時間過長的計畫（例如，在非常大的搜尋空間中搜尋超參數）。
- 建議的計畫應與您之前嘗試過的計畫不同，並應獲得更高的分數。

# 回應格式
- 您的回應應為您提議的解決方案的簡要自然語言大綱/草圖（3-5 句話）。
- 您的回應中不應有額外的標題或文字。
"""

IMPLEMENT_PLAN_INSTR = """# 介紹
- 您是一位參加競賽的 Kaggle 大師。
- 為了贏得這場競賽，您需要根據改進計畫優化程式碼區塊以獲得更好的性能。
- 我們現在將提供程式碼區塊和改進計畫。

# 程式碼區塊
```python
{code_block}
```

# 改進計畫
{plan}

# 您的任務
- 在上述程式碼區塊上實作改進計畫。但如果存在二次取樣 (subsampling)，請不要移除。
- 應根據提議的計畫改進程式碼區塊。
- 請注意，所有變數（包括實際資料）都已在前面定義（因為您只看到一個程式碼區塊），因此不要引入虛擬變數。

# 回應格式
- 您的回應應該是一個單一的 markdown 程式碼區塊（用 ``` 包裹），即改進後的程式碼區塊。
- 您的回應中不應有額外的標題或文字。
"""

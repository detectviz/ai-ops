# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.diagnostic_result_findings import DiagnosticResultFindings  # noqa: F401,E501
from swagger_server import util


class DiagnosticResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, summary: str=None, findings: List[DiagnosticResultFindings]=None, recommended_actions: List[str]=None, confidence_score: float=None, tools_used: List[str]=None, execution_time: float=None):  # noqa: E501
        """DiagnosticResult - a model defined in Swagger

        :param summary: The summary of this DiagnosticResult.  # noqa: E501
        :type summary: str
        :param findings: The findings of this DiagnosticResult.  # noqa: E501
        :type findings: List[DiagnosticResultFindings]
        :param recommended_actions: The recommended_actions of this DiagnosticResult.  # noqa: E501
        :type recommended_actions: List[str]
        :param confidence_score: The confidence_score of this DiagnosticResult.  # noqa: E501
        :type confidence_score: float
        :param tools_used: The tools_used of this DiagnosticResult.  # noqa: E501
        :type tools_used: List[str]
        :param execution_time: The execution_time of this DiagnosticResult.  # noqa: E501
        :type execution_time: float
        """
        self.swagger_types = {
            'summary': str,
            'findings': List[DiagnosticResultFindings],
            'recommended_actions': List[str],
            'confidence_score': float,
            'tools_used': List[str],
            'execution_time': float
        }

        self.attribute_map = {
            'summary': 'summary',
            'findings': 'findings',
            'recommended_actions': 'recommended_actions',
            'confidence_score': 'confidence_score',
            'tools_used': 'tools_used',
            'execution_time': 'execution_time'
        }
        self._summary = summary
        self._findings = findings
        self._recommended_actions = recommended_actions
        self._confidence_score = confidence_score
        self._tools_used = tools_used
        self._execution_time = execution_time

    @classmethod
    def from_dict(cls, dikt) -> 'DiagnosticResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiagnosticResult of this DiagnosticResult.  # noqa: E501
        :rtype: DiagnosticResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def summary(self) -> str:
        """Gets the summary of this DiagnosticResult.


        :return: The summary of this DiagnosticResult.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """Sets the summary of this DiagnosticResult.


        :param summary: The summary of this DiagnosticResult.
        :type summary: str
        """

        self._summary = summary

    @property
    def findings(self) -> List[DiagnosticResultFindings]:
        """Gets the findings of this DiagnosticResult.


        :return: The findings of this DiagnosticResult.
        :rtype: List[DiagnosticResultFindings]
        """
        return self._findings

    @findings.setter
    def findings(self, findings: List[DiagnosticResultFindings]):
        """Sets the findings of this DiagnosticResult.


        :param findings: The findings of this DiagnosticResult.
        :type findings: List[DiagnosticResultFindings]
        """

        self._findings = findings

    @property
    def recommended_actions(self) -> List[str]:
        """Gets the recommended_actions of this DiagnosticResult.


        :return: The recommended_actions of this DiagnosticResult.
        :rtype: List[str]
        """
        return self._recommended_actions

    @recommended_actions.setter
    def recommended_actions(self, recommended_actions: List[str]):
        """Sets the recommended_actions of this DiagnosticResult.


        :param recommended_actions: The recommended_actions of this DiagnosticResult.
        :type recommended_actions: List[str]
        """

        self._recommended_actions = recommended_actions

    @property
    def confidence_score(self) -> float:
        """Gets the confidence_score of this DiagnosticResult.


        :return: The confidence_score of this DiagnosticResult.
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score: float):
        """Sets the confidence_score of this DiagnosticResult.


        :param confidence_score: The confidence_score of this DiagnosticResult.
        :type confidence_score: float
        """

        self._confidence_score = confidence_score

    @property
    def tools_used(self) -> List[str]:
        """Gets the tools_used of this DiagnosticResult.


        :return: The tools_used of this DiagnosticResult.
        :rtype: List[str]
        """
        return self._tools_used

    @tools_used.setter
    def tools_used(self, tools_used: List[str]):
        """Sets the tools_used of this DiagnosticResult.


        :param tools_used: The tools_used of this DiagnosticResult.
        :type tools_used: List[str]
        """

        self._tools_used = tools_used

    @property
    def execution_time(self) -> float:
        """Gets the execution_time of this DiagnosticResult.

        執行時間（秒）  # noqa: E501

        :return: The execution_time of this DiagnosticResult.
        :rtype: float
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time: float):
        """Sets the execution_time of this DiagnosticResult.

        執行時間（秒）  # noqa: E501

        :param execution_time: The execution_time of this DiagnosticResult.
        :type execution_time: float
        """

        self._execution_time = execution_time

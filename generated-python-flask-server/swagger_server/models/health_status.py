# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HealthStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, timestamp: datetime=None, version: str=None, uptime: int=None):  # noqa: E501
        """HealthStatus - a model defined in Swagger

        :param status: The status of this HealthStatus.  # noqa: E501
        :type status: str
        :param timestamp: The timestamp of this HealthStatus.  # noqa: E501
        :type timestamp: datetime
        :param version: The version of this HealthStatus.  # noqa: E501
        :type version: str
        :param uptime: The uptime of this HealthStatus.  # noqa: E501
        :type uptime: int
        """
        self.swagger_types = {
            'status': str,
            'timestamp': datetime,
            'version': str,
            'uptime': int
        }

        self.attribute_map = {
            'status': 'status',
            'timestamp': 'timestamp',
            'version': 'version',
            'uptime': 'uptime'
        }
        self._status = status
        self._timestamp = timestamp
        self._version = version
        self._uptime = uptime

    @classmethod
    def from_dict(cls, dikt) -> 'HealthStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthStatus of this HealthStatus.  # noqa: E501
        :rtype: HealthStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this HealthStatus.


        :return: The status of this HealthStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this HealthStatus.


        :param status: The status of this HealthStatus.
        :type status: str
        """
        allowed_values = ["healthy", "unhealthy"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this HealthStatus.


        :return: The timestamp of this HealthStatus.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this HealthStatus.


        :param timestamp: The timestamp of this HealthStatus.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def version(self) -> str:
        """Gets the version of this HealthStatus.


        :return: The version of this HealthStatus.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this HealthStatus.


        :param version: The version of this HealthStatus.
        :type version: str
        """

        self._version = version

    @property
    def uptime(self) -> int:
        """Gets the uptime of this HealthStatus.

        運行時間（秒）  # noqa: E501

        :return: The uptime of this HealthStatus.
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime: int):
        """Sets the uptime of this HealthStatus.

        運行時間（秒）  # noqa: E501

        :param uptime: The uptime of this HealthStatus.
        :type uptime: int
        """

        self._uptime = uptime

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.capacity_analysis_response_chart_data import CapacityAnalysisResponseChartData  # noqa: F401,E501
from swagger_server.models.capacity_analysis_response_current_usage import CapacityAnalysisResponseCurrentUsage  # noqa: F401,E501
from swagger_server.models.capacity_analysis_response_forecast import CapacityAnalysisResponseForecast  # noqa: F401,E501
from swagger_server.models.capacity_analysis_response_recommendations import CapacityAnalysisResponseRecommendations  # noqa: F401,E501
from swagger_server import util


class CapacityAnalysisResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, current_usage: CapacityAnalysisResponseCurrentUsage=None, forecast: CapacityAnalysisResponseForecast=None, recommendations: List[CapacityAnalysisResponseRecommendations]=None, chart_data: List[CapacityAnalysisResponseChartData]=None):  # noqa: E501
        """CapacityAnalysisResponse - a model defined in Swagger

        :param current_usage: The current_usage of this CapacityAnalysisResponse.  # noqa: E501
        :type current_usage: CapacityAnalysisResponseCurrentUsage
        :param forecast: The forecast of this CapacityAnalysisResponse.  # noqa: E501
        :type forecast: CapacityAnalysisResponseForecast
        :param recommendations: The recommendations of this CapacityAnalysisResponse.  # noqa: E501
        :type recommendations: List[CapacityAnalysisResponseRecommendations]
        :param chart_data: The chart_data of this CapacityAnalysisResponse.  # noqa: E501
        :type chart_data: List[CapacityAnalysisResponseChartData]
        """
        self.swagger_types = {
            'current_usage': CapacityAnalysisResponseCurrentUsage,
            'forecast': CapacityAnalysisResponseForecast,
            'recommendations': List[CapacityAnalysisResponseRecommendations],
            'chart_data': List[CapacityAnalysisResponseChartData]
        }

        self.attribute_map = {
            'current_usage': 'current_usage',
            'forecast': 'forecast',
            'recommendations': 'recommendations',
            'chart_data': 'chart_data'
        }
        self._current_usage = current_usage
        self._forecast = forecast
        self._recommendations = recommendations
        self._chart_data = chart_data

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisResponse of this CapacityAnalysisResponse.  # noqa: E501
        :rtype: CapacityAnalysisResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_usage(self) -> CapacityAnalysisResponseCurrentUsage:
        """Gets the current_usage of this CapacityAnalysisResponse.


        :return: The current_usage of this CapacityAnalysisResponse.
        :rtype: CapacityAnalysisResponseCurrentUsage
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage: CapacityAnalysisResponseCurrentUsage):
        """Sets the current_usage of this CapacityAnalysisResponse.


        :param current_usage: The current_usage of this CapacityAnalysisResponse.
        :type current_usage: CapacityAnalysisResponseCurrentUsage
        """

        self._current_usage = current_usage

    @property
    def forecast(self) -> CapacityAnalysisResponseForecast:
        """Gets the forecast of this CapacityAnalysisResponse.


        :return: The forecast of this CapacityAnalysisResponse.
        :rtype: CapacityAnalysisResponseForecast
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast: CapacityAnalysisResponseForecast):
        """Sets the forecast of this CapacityAnalysisResponse.


        :param forecast: The forecast of this CapacityAnalysisResponse.
        :type forecast: CapacityAnalysisResponseForecast
        """

        self._forecast = forecast

    @property
    def recommendations(self) -> List[CapacityAnalysisResponseRecommendations]:
        """Gets the recommendations of this CapacityAnalysisResponse.


        :return: The recommendations of this CapacityAnalysisResponse.
        :rtype: List[CapacityAnalysisResponseRecommendations]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations: List[CapacityAnalysisResponseRecommendations]):
        """Sets the recommendations of this CapacityAnalysisResponse.


        :param recommendations: The recommendations of this CapacityAnalysisResponse.
        :type recommendations: List[CapacityAnalysisResponseRecommendations]
        """

        self._recommendations = recommendations

    @property
    def chart_data(self) -> List[CapacityAnalysisResponseChartData]:
        """Gets the chart_data of this CapacityAnalysisResponse.


        :return: The chart_data of this CapacityAnalysisResponse.
        :rtype: List[CapacityAnalysisResponseChartData]
        """
        return self._chart_data

    @chart_data.setter
    def chart_data(self, chart_data: List[CapacityAnalysisResponseChartData]):
        """Sets the chart_data of this CapacityAnalysisResponse.


        :param chart_data: The chart_data of this CapacityAnalysisResponse.
        :type chart_data: List[CapacityAnalysisResponseChartData]
        """

        self._chart_data = chart_data

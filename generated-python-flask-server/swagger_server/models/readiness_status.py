# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.readiness_status_checks import ReadinessStatusChecks  # noqa: F401,E501
from swagger_server import util


class ReadinessStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ready: bool=None, checks: ReadinessStatusChecks=None):  # noqa: E501
        """ReadinessStatus - a model defined in Swagger

        :param ready: The ready of this ReadinessStatus.  # noqa: E501
        :type ready: bool
        :param checks: The checks of this ReadinessStatus.  # noqa: E501
        :type checks: ReadinessStatusChecks
        """
        self.swagger_types = {
            'ready': bool,
            'checks': ReadinessStatusChecks
        }

        self.attribute_map = {
            'ready': 'ready',
            'checks': 'checks'
        }
        self._ready = ready
        self._checks = checks

    @classmethod
    def from_dict(cls, dikt) -> 'ReadinessStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReadinessStatus of this ReadinessStatus.  # noqa: E501
        :rtype: ReadinessStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ready(self) -> bool:
        """Gets the ready of this ReadinessStatus.


        :return: The ready of this ReadinessStatus.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready: bool):
        """Sets the ready of this ReadinessStatus.


        :param ready: The ready of this ReadinessStatus.
        :type ready: bool
        """
        if ready is None:
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    @property
    def checks(self) -> ReadinessStatusChecks:
        """Gets the checks of this ReadinessStatus.


        :return: The checks of this ReadinessStatus.
        :rtype: ReadinessStatusChecks
        """
        return self._checks

    @checks.setter
    def checks(self, checks: ReadinessStatusChecks):
        """Sets the checks of this ReadinessStatus.


        :param checks: The checks of this ReadinessStatus.
        :type checks: ReadinessStatusChecks
        """
        if checks is None:
            raise ValueError("Invalid value for `checks`, must not be `None`")  # noqa: E501

        self._checks = checks

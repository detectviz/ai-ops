# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.capacity_analysis_response_forecast_capacity_alerts import CapacityAnalysisResponseForecastCapacityAlerts  # noqa: F401,E501
from swagger_server import util


class CapacityAnalysisResponseForecast(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, trend: str=None, days_to_capacity: int=None, growth_rate: float=None, capacity_alerts: List[CapacityAnalysisResponseForecastCapacityAlerts]=None):  # noqa: E501
        """CapacityAnalysisResponseForecast - a model defined in Swagger

        :param trend: The trend of this CapacityAnalysisResponseForecast.  # noqa: E501
        :type trend: str
        :param days_to_capacity: The days_to_capacity of this CapacityAnalysisResponseForecast.  # noqa: E501
        :type days_to_capacity: int
        :param growth_rate: The growth_rate of this CapacityAnalysisResponseForecast.  # noqa: E501
        :type growth_rate: float
        :param capacity_alerts: The capacity_alerts of this CapacityAnalysisResponseForecast.  # noqa: E501
        :type capacity_alerts: List[CapacityAnalysisResponseForecastCapacityAlerts]
        """
        self.swagger_types = {
            'trend': str,
            'days_to_capacity': int,
            'growth_rate': float,
            'capacity_alerts': List[CapacityAnalysisResponseForecastCapacityAlerts]
        }

        self.attribute_map = {
            'trend': 'trend',
            'days_to_capacity': 'days_to_capacity',
            'growth_rate': 'growth_rate',
            'capacity_alerts': 'capacity_alerts'
        }
        self._trend = trend
        self._days_to_capacity = days_to_capacity
        self._growth_rate = growth_rate
        self._capacity_alerts = capacity_alerts

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisResponseForecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisResponse_forecast of this CapacityAnalysisResponseForecast.  # noqa: E501
        :rtype: CapacityAnalysisResponseForecast
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trend(self) -> str:
        """Gets the trend of this CapacityAnalysisResponseForecast.


        :return: The trend of this CapacityAnalysisResponseForecast.
        :rtype: str
        """
        return self._trend

    @trend.setter
    def trend(self, trend: str):
        """Sets the trend of this CapacityAnalysisResponseForecast.


        :param trend: The trend of this CapacityAnalysisResponseForecast.
        :type trend: str
        """
        allowed_values = ["increasing", "stable", "decreasing"]  # noqa: E501
        if trend not in allowed_values:
            raise ValueError(
                "Invalid value for `trend` ({0}), must be one of {1}"
                .format(trend, allowed_values)
            )

        self._trend = trend

    @property
    def days_to_capacity(self) -> int:
        """Gets the days_to_capacity of this CapacityAnalysisResponseForecast.

        預測多少天後達到容量上限  # noqa: E501

        :return: The days_to_capacity of this CapacityAnalysisResponseForecast.
        :rtype: int
        """
        return self._days_to_capacity

    @days_to_capacity.setter
    def days_to_capacity(self, days_to_capacity: int):
        """Sets the days_to_capacity of this CapacityAnalysisResponseForecast.

        預測多少天後達到容量上限  # noqa: E501

        :param days_to_capacity: The days_to_capacity of this CapacityAnalysisResponseForecast.
        :type days_to_capacity: int
        """

        self._days_to_capacity = days_to_capacity

    @property
    def growth_rate(self) -> float:
        """Gets the growth_rate of this CapacityAnalysisResponseForecast.

        月增長率百分比  # noqa: E501

        :return: The growth_rate of this CapacityAnalysisResponseForecast.
        :rtype: float
        """
        return self._growth_rate

    @growth_rate.setter
    def growth_rate(self, growth_rate: float):
        """Sets the growth_rate of this CapacityAnalysisResponseForecast.

        月增長率百分比  # noqa: E501

        :param growth_rate: The growth_rate of this CapacityAnalysisResponseForecast.
        :type growth_rate: float
        """

        self._growth_rate = growth_rate

    @property
    def capacity_alerts(self) -> List[CapacityAnalysisResponseForecastCapacityAlerts]:
        """Gets the capacity_alerts of this CapacityAnalysisResponseForecast.


        :return: The capacity_alerts of this CapacityAnalysisResponseForecast.
        :rtype: List[CapacityAnalysisResponseForecastCapacityAlerts]
        """
        return self._capacity_alerts

    @capacity_alerts.setter
    def capacity_alerts(self, capacity_alerts: List[CapacityAnalysisResponseForecastCapacityAlerts]):
        """Sets the capacity_alerts of this CapacityAnalysisResponseForecast.


        :param capacity_alerts: The capacity_alerts of this CapacityAnalysisResponseForecast.
        :type capacity_alerts: List[CapacityAnalysisResponseForecastCapacityAlerts]
        """

        self._capacity_alerts = capacity_alerts

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DiagnosticResultFindings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source: str=None, severity: str=None, message: str=None, evidence: object=None, timestamp: datetime=None):  # noqa: E501
        """DiagnosticResultFindings - a model defined in Swagger

        :param source: The source of this DiagnosticResultFindings.  # noqa: E501
        :type source: str
        :param severity: The severity of this DiagnosticResultFindings.  # noqa: E501
        :type severity: str
        :param message: The message of this DiagnosticResultFindings.  # noqa: E501
        :type message: str
        :param evidence: The evidence of this DiagnosticResultFindings.  # noqa: E501
        :type evidence: object
        :param timestamp: The timestamp of this DiagnosticResultFindings.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'source': str,
            'severity': str,
            'message': str,
            'evidence': object,
            'timestamp': datetime
        }

        self.attribute_map = {
            'source': 'source',
            'severity': 'severity',
            'message': 'message',
            'evidence': 'evidence',
            'timestamp': 'timestamp'
        }
        self._source = source
        self._severity = severity
        self._message = message
        self._evidence = evidence
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'DiagnosticResultFindings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiagnosticResult_findings of this DiagnosticResultFindings.  # noqa: E501
        :rtype: DiagnosticResultFindings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> str:
        """Gets the source of this DiagnosticResultFindings.


        :return: The source of this DiagnosticResultFindings.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this DiagnosticResultFindings.


        :param source: The source of this DiagnosticResultFindings.
        :type source: str
        """

        self._source = source

    @property
    def severity(self) -> str:
        """Gets the severity of this DiagnosticResultFindings.


        :return: The severity of this DiagnosticResultFindings.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: str):
        """Sets the severity of this DiagnosticResultFindings.


        :param severity: The severity of this DiagnosticResultFindings.
        :type severity: str
        """
        allowed_values = ["critical", "warning", "info"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def message(self) -> str:
        """Gets the message of this DiagnosticResultFindings.


        :return: The message of this DiagnosticResultFindings.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this DiagnosticResultFindings.


        :param message: The message of this DiagnosticResultFindings.
        :type message: str
        """

        self._message = message

    @property
    def evidence(self) -> object:
        """Gets the evidence of this DiagnosticResultFindings.


        :return: The evidence of this DiagnosticResultFindings.
        :rtype: object
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence: object):
        """Sets the evidence of this DiagnosticResultFindings.


        :param evidence: The evidence of this DiagnosticResultFindings.
        :type evidence: object
        """

        self._evidence = evidence

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this DiagnosticResultFindings.


        :return: The timestamp of this DiagnosticResultFindings.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this DiagnosticResultFindings.


        :param timestamp: The timestamp of this DiagnosticResultFindings.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

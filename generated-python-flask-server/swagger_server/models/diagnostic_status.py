# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.diagnostic_result import DiagnosticResult  # noqa: F401,E501
from swagger_server import util


class DiagnosticStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, session_id: str=None, status: str=None, progress: int=None, current_step: str=None, result: DiagnosticResult=None, error: str=None):  # noqa: E501
        """DiagnosticStatus - a model defined in Swagger

        :param session_id: The session_id of this DiagnosticStatus.  # noqa: E501
        :type session_id: str
        :param status: The status of this DiagnosticStatus.  # noqa: E501
        :type status: str
        :param progress: The progress of this DiagnosticStatus.  # noqa: E501
        :type progress: int
        :param current_step: The current_step of this DiagnosticStatus.  # noqa: E501
        :type current_step: str
        :param result: The result of this DiagnosticStatus.  # noqa: E501
        :type result: DiagnosticResult
        :param error: The error of this DiagnosticStatus.  # noqa: E501
        :type error: str
        """
        self.swagger_types = {
            'session_id': str,
            'status': str,
            'progress': int,
            'current_step': str,
            'result': DiagnosticResult,
            'error': str
        }

        self.attribute_map = {
            'session_id': 'session_id',
            'status': 'status',
            'progress': 'progress',
            'current_step': 'current_step',
            'result': 'result',
            'error': 'error'
        }
        self._session_id = session_id
        self._status = status
        self._progress = progress
        self._current_step = current_step
        self._result = result
        self._error = error

    @classmethod
    def from_dict(cls, dikt) -> 'DiagnosticStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiagnosticStatus of this DiagnosticStatus.  # noqa: E501
        :rtype: DiagnosticStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_id(self) -> str:
        """Gets the session_id of this DiagnosticStatus.


        :return: The session_id of this DiagnosticStatus.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this DiagnosticStatus.


        :param session_id: The session_id of this DiagnosticStatus.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def status(self) -> str:
        """Gets the status of this DiagnosticStatus.


        :return: The status of this DiagnosticStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this DiagnosticStatus.


        :param status: The status of this DiagnosticStatus.
        :type status: str
        """
        allowed_values = ["processing", "completed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def progress(self) -> int:
        """Gets the progress of this DiagnosticStatus.


        :return: The progress of this DiagnosticStatus.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress: int):
        """Sets the progress of this DiagnosticStatus.


        :param progress: The progress of this DiagnosticStatus.
        :type progress: int
        """

        self._progress = progress

    @property
    def current_step(self) -> str:
        """Gets the current_step of this DiagnosticStatus.


        :return: The current_step of this DiagnosticStatus.
        :rtype: str
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step: str):
        """Sets the current_step of this DiagnosticStatus.


        :param current_step: The current_step of this DiagnosticStatus.
        :type current_step: str
        """

        self._current_step = current_step

    @property
    def result(self) -> DiagnosticResult:
        """Gets the result of this DiagnosticStatus.


        :return: The result of this DiagnosticStatus.
        :rtype: DiagnosticResult
        """
        return self._result

    @result.setter
    def result(self, result: DiagnosticResult):
        """Sets the result of this DiagnosticStatus.


        :param result: The result of this DiagnosticStatus.
        :type result: DiagnosticResult
        """

        self._result = result

    @property
    def error(self) -> str:
        """Gets the error of this DiagnosticStatus.


        :return: The error of this DiagnosticStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this DiagnosticStatus.


        :param error: The error of this DiagnosticStatus.
        :type error: str
        """

        self._error = error

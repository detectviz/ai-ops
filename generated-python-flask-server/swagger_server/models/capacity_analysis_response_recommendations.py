# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.capacity_analysis_response_cost_impact import CapacityAnalysisResponseCostImpact  # noqa: F401,E501
from swagger_server import util


class CapacityAnalysisResponseRecommendations(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, resource: str=None, priority: str=None, current_allocation: float=None, recommended_allocation: float=None, reasoning: str=None, cost_impact: CapacityAnalysisResponseCostImpact=None):  # noqa: E501
        """CapacityAnalysisResponseRecommendations - a model defined in Swagger

        :param type: The type of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type type: str
        :param resource: The resource of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type resource: str
        :param priority: The priority of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type priority: str
        :param current_allocation: The current_allocation of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type current_allocation: float
        :param recommended_allocation: The recommended_allocation of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type recommended_allocation: float
        :param reasoning: The reasoning of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type reasoning: str
        :param cost_impact: The cost_impact of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :type cost_impact: CapacityAnalysisResponseCostImpact
        """
        self.swagger_types = {
            'type': str,
            'resource': str,
            'priority': str,
            'current_allocation': float,
            'recommended_allocation': float,
            'reasoning': str,
            'cost_impact': CapacityAnalysisResponseCostImpact
        }

        self.attribute_map = {
            'type': 'type',
            'resource': 'resource',
            'priority': 'priority',
            'current_allocation': 'current_allocation',
            'recommended_allocation': 'recommended_allocation',
            'reasoning': 'reasoning',
            'cost_impact': 'cost_impact'
        }
        self._type = type
        self._resource = resource
        self._priority = priority
        self._current_allocation = current_allocation
        self._recommended_allocation = recommended_allocation
        self._reasoning = reasoning
        self._cost_impact = cost_impact

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisResponseRecommendations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisResponse_recommendations of this CapacityAnalysisResponseRecommendations.  # noqa: E501
        :rtype: CapacityAnalysisResponseRecommendations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CapacityAnalysisResponseRecommendations.


        :return: The type of this CapacityAnalysisResponseRecommendations.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CapacityAnalysisResponseRecommendations.


        :param type: The type of this CapacityAnalysisResponseRecommendations.
        :type type: str
        """
        allowed_values = ["scale_up", "scale_down", "optimize"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def resource(self) -> str:
        """Gets the resource of this CapacityAnalysisResponseRecommendations.


        :return: The resource of this CapacityAnalysisResponseRecommendations.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource: str):
        """Sets the resource of this CapacityAnalysisResponseRecommendations.


        :param resource: The resource of this CapacityAnalysisResponseRecommendations.
        :type resource: str
        """

        self._resource = resource

    @property
    def priority(self) -> str:
        """Gets the priority of this CapacityAnalysisResponseRecommendations.


        :return: The priority of this CapacityAnalysisResponseRecommendations.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority: str):
        """Sets the priority of this CapacityAnalysisResponseRecommendations.


        :param priority: The priority of this CapacityAnalysisResponseRecommendations.
        :type priority: str
        """
        allowed_values = ["immediate", "high", "medium", "low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def current_allocation(self) -> float:
        """Gets the current_allocation of this CapacityAnalysisResponseRecommendations.


        :return: The current_allocation of this CapacityAnalysisResponseRecommendations.
        :rtype: float
        """
        return self._current_allocation

    @current_allocation.setter
    def current_allocation(self, current_allocation: float):
        """Sets the current_allocation of this CapacityAnalysisResponseRecommendations.


        :param current_allocation: The current_allocation of this CapacityAnalysisResponseRecommendations.
        :type current_allocation: float
        """

        self._current_allocation = current_allocation

    @property
    def recommended_allocation(self) -> float:
        """Gets the recommended_allocation of this CapacityAnalysisResponseRecommendations.


        :return: The recommended_allocation of this CapacityAnalysisResponseRecommendations.
        :rtype: float
        """
        return self._recommended_allocation

    @recommended_allocation.setter
    def recommended_allocation(self, recommended_allocation: float):
        """Sets the recommended_allocation of this CapacityAnalysisResponseRecommendations.


        :param recommended_allocation: The recommended_allocation of this CapacityAnalysisResponseRecommendations.
        :type recommended_allocation: float
        """

        self._recommended_allocation = recommended_allocation

    @property
    def reasoning(self) -> str:
        """Gets the reasoning of this CapacityAnalysisResponseRecommendations.


        :return: The reasoning of this CapacityAnalysisResponseRecommendations.
        :rtype: str
        """
        return self._reasoning

    @reasoning.setter
    def reasoning(self, reasoning: str):
        """Sets the reasoning of this CapacityAnalysisResponseRecommendations.


        :param reasoning: The reasoning of this CapacityAnalysisResponseRecommendations.
        :type reasoning: str
        """

        self._reasoning = reasoning

    @property
    def cost_impact(self) -> CapacityAnalysisResponseCostImpact:
        """Gets the cost_impact of this CapacityAnalysisResponseRecommendations.


        :return: The cost_impact of this CapacityAnalysisResponseRecommendations.
        :rtype: CapacityAnalysisResponseCostImpact
        """
        return self._cost_impact

    @cost_impact.setter
    def cost_impact(self, cost_impact: CapacityAnalysisResponseCostImpact):
        """Sets the cost_impact of this CapacityAnalysisResponseRecommendations.


        :param cost_impact: The cost_impact of this CapacityAnalysisResponseRecommendations.
        :type cost_impact: CapacityAnalysisResponseCostImpact
        """

        self._cost_impact = cost_impact

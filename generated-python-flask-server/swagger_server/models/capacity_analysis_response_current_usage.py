# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CapacityAnalysisResponseCurrentUsage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, average: float=None, peak: float=None, percentile_95: float=None):  # noqa: E501
        """CapacityAnalysisResponseCurrentUsage - a model defined in Swagger

        :param average: The average of this CapacityAnalysisResponseCurrentUsage.  # noqa: E501
        :type average: float
        :param peak: The peak of this CapacityAnalysisResponseCurrentUsage.  # noqa: E501
        :type peak: float
        :param percentile_95: The percentile_95 of this CapacityAnalysisResponseCurrentUsage.  # noqa: E501
        :type percentile_95: float
        """
        self.swagger_types = {
            'average': float,
            'peak': float,
            'percentile_95': float
        }

        self.attribute_map = {
            'average': 'average',
            'peak': 'peak',
            'percentile_95': 'percentile_95'
        }
        self._average = average
        self._peak = peak
        self._percentile_95 = percentile_95

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisResponseCurrentUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisResponse_current_usage of this CapacityAnalysisResponseCurrentUsage.  # noqa: E501
        :rtype: CapacityAnalysisResponseCurrentUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self) -> float:
        """Gets the average of this CapacityAnalysisResponseCurrentUsage.


        :return: The average of this CapacityAnalysisResponseCurrentUsage.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average: float):
        """Sets the average of this CapacityAnalysisResponseCurrentUsage.


        :param average: The average of this CapacityAnalysisResponseCurrentUsage.
        :type average: float
        """

        self._average = average

    @property
    def peak(self) -> float:
        """Gets the peak of this CapacityAnalysisResponseCurrentUsage.


        :return: The peak of this CapacityAnalysisResponseCurrentUsage.
        :rtype: float
        """
        return self._peak

    @peak.setter
    def peak(self, peak: float):
        """Sets the peak of this CapacityAnalysisResponseCurrentUsage.


        :param peak: The peak of this CapacityAnalysisResponseCurrentUsage.
        :type peak: float
        """

        self._peak = peak

    @property
    def percentile_95(self) -> float:
        """Gets the percentile_95 of this CapacityAnalysisResponseCurrentUsage.


        :return: The percentile_95 of this CapacityAnalysisResponseCurrentUsage.
        :rtype: float
        """
        return self._percentile_95

    @percentile_95.setter
    def percentile_95(self, percentile_95: float):
        """Sets the percentile_95 of this CapacityAnalysisResponseCurrentUsage.


        :param percentile_95: The percentile_95 of this CapacityAnalysisResponseCurrentUsage.
        :type percentile_95: float
        """

        self._percentile_95 = percentile_95

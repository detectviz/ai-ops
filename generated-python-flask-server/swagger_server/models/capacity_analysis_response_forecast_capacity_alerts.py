# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CapacityAnalysisResponseForecastCapacityAlerts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alert_type: str=None, threshold: str=None, estimated_date: datetime=None, days_remaining: int=None, severity: str=None):  # noqa: E501
        """CapacityAnalysisResponseForecastCapacityAlerts - a model defined in Swagger

        :param alert_type: The alert_type of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :type alert_type: str
        :param threshold: The threshold of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :type threshold: str
        :param estimated_date: The estimated_date of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :type estimated_date: datetime
        :param days_remaining: The days_remaining of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :type days_remaining: int
        :param severity: The severity of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :type severity: str
        """
        self.swagger_types = {
            'alert_type': str,
            'threshold': str,
            'estimated_date': datetime,
            'days_remaining': int,
            'severity': str
        }

        self.attribute_map = {
            'alert_type': 'alert_type',
            'threshold': 'threshold',
            'estimated_date': 'estimated_date',
            'days_remaining': 'days_remaining',
            'severity': 'severity'
        }
        self._alert_type = alert_type
        self._threshold = threshold
        self._estimated_date = estimated_date
        self._days_remaining = days_remaining
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisResponseForecastCapacityAlerts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisResponse_forecast_capacity_alerts of this CapacityAnalysisResponseForecastCapacityAlerts.  # noqa: E501
        :rtype: CapacityAnalysisResponseForecastCapacityAlerts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_type(self) -> str:
        """Gets the alert_type of this CapacityAnalysisResponseForecastCapacityAlerts.


        :return: The alert_type of this CapacityAnalysisResponseForecastCapacityAlerts.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type: str):
        """Sets the alert_type of this CapacityAnalysisResponseForecastCapacityAlerts.


        :param alert_type: The alert_type of this CapacityAnalysisResponseForecastCapacityAlerts.
        :type alert_type: str
        """

        self._alert_type = alert_type

    @property
    def threshold(self) -> str:
        """Gets the threshold of this CapacityAnalysisResponseForecastCapacityAlerts.


        :return: The threshold of this CapacityAnalysisResponseForecastCapacityAlerts.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: str):
        """Sets the threshold of this CapacityAnalysisResponseForecastCapacityAlerts.


        :param threshold: The threshold of this CapacityAnalysisResponseForecastCapacityAlerts.
        :type threshold: str
        """

        self._threshold = threshold

    @property
    def estimated_date(self) -> datetime:
        """Gets the estimated_date of this CapacityAnalysisResponseForecastCapacityAlerts.


        :return: The estimated_date of this CapacityAnalysisResponseForecastCapacityAlerts.
        :rtype: datetime
        """
        return self._estimated_date

    @estimated_date.setter
    def estimated_date(self, estimated_date: datetime):
        """Sets the estimated_date of this CapacityAnalysisResponseForecastCapacityAlerts.


        :param estimated_date: The estimated_date of this CapacityAnalysisResponseForecastCapacityAlerts.
        :type estimated_date: datetime
        """

        self._estimated_date = estimated_date

    @property
    def days_remaining(self) -> int:
        """Gets the days_remaining of this CapacityAnalysisResponseForecastCapacityAlerts.


        :return: The days_remaining of this CapacityAnalysisResponseForecastCapacityAlerts.
        :rtype: int
        """
        return self._days_remaining

    @days_remaining.setter
    def days_remaining(self, days_remaining: int):
        """Sets the days_remaining of this CapacityAnalysisResponseForecastCapacityAlerts.


        :param days_remaining: The days_remaining of this CapacityAnalysisResponseForecastCapacityAlerts.
        :type days_remaining: int
        """

        self._days_remaining = days_remaining

    @property
    def severity(self) -> str:
        """Gets the severity of this CapacityAnalysisResponseForecastCapacityAlerts.


        :return: The severity of this CapacityAnalysisResponseForecastCapacityAlerts.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: str):
        """Sets the severity of this CapacityAnalysisResponseForecastCapacityAlerts.


        :param severity: The severity of this CapacityAnalysisResponseForecastCapacityAlerts.
        :type severity: str
        """

        self._severity = severity

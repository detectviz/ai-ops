# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DiagnosticRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, incident_id: str=None, severity: str=None, affected_services: List[str]=None, context: Dict=None):  # noqa: E501
        """DiagnosticRequest - a model defined in Swagger

        :param incident_id: The incident_id of this DiagnosticRequest.  # noqa: E501
        :type incident_id: str
        :param severity: The severity of this DiagnosticRequest.  # noqa: E501
        :type severity: str
        :param affected_services: The affected_services of this DiagnosticRequest.  # noqa: E501
        :type affected_services: List[str]
        :param context: The context of this DiagnosticRequest.  # noqa: E501
        :type context: Dict
        """
        self.swagger_types = {
            'incident_id': str,
            'severity': str,
            'affected_services': List[str],
            'context': Dict
        }

        self.attribute_map = {
            'incident_id': 'incident_id',
            'severity': 'severity',
            'affected_services': 'affected_services',
            'context': 'context'
        }
        self._incident_id = incident_id
        self._severity = severity
        self._affected_services = affected_services
        self._context = context

    @classmethod
    def from_dict(cls, dikt) -> 'DiagnosticRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiagnosticRequest of this DiagnosticRequest.  # noqa: E501
        :rtype: DiagnosticRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incident_id(self) -> str:
        """Gets the incident_id of this DiagnosticRequest.


        :return: The incident_id of this DiagnosticRequest.
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id: str):
        """Sets the incident_id of this DiagnosticRequest.


        :param incident_id: The incident_id of this DiagnosticRequest.
        :type incident_id: str
        """
        if incident_id is None:
            raise ValueError("Invalid value for `incident_id`, must not be `None`")  # noqa: E501

        self._incident_id = incident_id

    @property
    def severity(self) -> str:
        """Gets the severity of this DiagnosticRequest.


        :return: The severity of this DiagnosticRequest.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: str):
        """Sets the severity of this DiagnosticRequest.


        :param severity: The severity of this DiagnosticRequest.
        :type severity: str
        """
        allowed_values = ["P0", "P1", "P2", "P3"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def affected_services(self) -> List[str]:
        """Gets the affected_services of this DiagnosticRequest.


        :return: The affected_services of this DiagnosticRequest.
        :rtype: List[str]
        """
        return self._affected_services

    @affected_services.setter
    def affected_services(self, affected_services: List[str]):
        """Sets the affected_services of this DiagnosticRequest.


        :param affected_services: The affected_services of this DiagnosticRequest.
        :type affected_services: List[str]
        """
        if affected_services is None:
            raise ValueError("Invalid value for `affected_services`, must not be `None`")  # noqa: E501

        self._affected_services = affected_services

    @property
    def context(self) -> Dict:
        """Gets the context of this DiagnosticRequest.


        :return: The context of this DiagnosticRequest.
        :rtype: Dict
        """
        return self._context

    @context.setter
    def context(self, context: Dict):
        """Sets the context of this DiagnosticRequest.


        :param context: The context of this DiagnosticRequest.
        :type context: Dict
        """

        self._context = context

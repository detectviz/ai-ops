# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CapacityAnalysisRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, resource_ids: List[str]=None, metric_type: str=None, forecast_days: int=30):  # noqa: E501
        """CapacityAnalysisRequest - a model defined in Swagger

        :param resource_ids: The resource_ids of this CapacityAnalysisRequest.  # noqa: E501
        :type resource_ids: List[str]
        :param metric_type: The metric_type of this CapacityAnalysisRequest.  # noqa: E501
        :type metric_type: str
        :param forecast_days: The forecast_days of this CapacityAnalysisRequest.  # noqa: E501
        :type forecast_days: int
        """
        self.swagger_types = {
            'resource_ids': List[str],
            'metric_type': str,
            'forecast_days': int
        }

        self.attribute_map = {
            'resource_ids': 'resource_ids',
            'metric_type': 'metric_type',
            'forecast_days': 'forecast_days'
        }
        self._resource_ids = resource_ids
        self._metric_type = metric_type
        self._forecast_days = forecast_days

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityAnalysisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityAnalysisRequest of this CapacityAnalysisRequest.  # noqa: E501
        :rtype: CapacityAnalysisRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_ids(self) -> List[str]:
        """Gets the resource_ids of this CapacityAnalysisRequest.


        :return: The resource_ids of this CapacityAnalysisRequest.
        :rtype: List[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids: List[str]):
        """Sets the resource_ids of this CapacityAnalysisRequest.


        :param resource_ids: The resource_ids of this CapacityAnalysisRequest.
        :type resource_ids: List[str]
        """
        if resource_ids is None:
            raise ValueError("Invalid value for `resource_ids`, must not be `None`")  # noqa: E501

        self._resource_ids = resource_ids

    @property
    def metric_type(self) -> str:
        """Gets the metric_type of this CapacityAnalysisRequest.


        :return: The metric_type of this CapacityAnalysisRequest.
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type: str):
        """Sets the metric_type of this CapacityAnalysisRequest.


        :param metric_type: The metric_type of this CapacityAnalysisRequest.
        :type metric_type: str
        """
        allowed_values = ["cpu", "memory", "disk", "network"]  # noqa: E501
        if metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_type` ({0}), must be one of {1}"
                .format(metric_type, allowed_values)
            )

        self._metric_type = metric_type

    @property
    def forecast_days(self) -> int:
        """Gets the forecast_days of this CapacityAnalysisRequest.


        :return: The forecast_days of this CapacityAnalysisRequest.
        :rtype: int
        """
        return self._forecast_days

    @forecast_days.setter
    def forecast_days(self, forecast_days: int):
        """Sets the forecast_days of this CapacityAnalysisRequest.


        :param forecast_days: The forecast_days of this CapacityAnalysisRequest.
        :type forecast_days: int
        """

        self._forecast_days = forecast_days
